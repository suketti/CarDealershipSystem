// <auto-generated />
using System;
using DealershipSystem.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DealershipSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DealershipSystem.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityRomanized")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("PrefectureId")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetRomanized")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrefectureId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DealershipSystem.Models.BodyType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameJapanese")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("BodyTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            NameEnglish = "Kei Car",
                            NameJapanese = "軽自動車"
                        },
                        new
                        {
                            ID = 2,
                            NameEnglish = "Compact Car",
                            NameJapanese = "コンパクトカー"
                        },
                        new
                        {
                            ID = 3,
                            NameEnglish = "Minivan/One-Box",
                            NameJapanese = "ミニバン/ワンボックス"
                        },
                        new
                        {
                            ID = 4,
                            NameEnglish = "Sedan",
                            NameJapanese = "セダン"
                        },
                        new
                        {
                            ID = 5,
                            NameEnglish = "Coupe",
                            NameJapanese = "クーペ"
                        },
                        new
                        {
                            ID = 6,
                            NameEnglish = "Station Wagon",
                            NameJapanese = "ステーションワゴン"
                        },
                        new
                        {
                            ID = 7,
                            NameEnglish = "SUV/Crossover",
                            NameJapanese = "SUV/クロカン"
                        },
                        new
                        {
                            ID = 8,
                            NameEnglish = "Truck/Van",
                            NameJapanese = "トラック/バン"
                        });
                });

            modelBuilder.Entity("DealershipSystem.Models.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("BodyTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("BrandID")
                        .HasColumnType("integer");

                    b.Property<int>("CarModelID")
                        .HasColumnType("integer");

                    b.Property<int>("ColorID")
                        .HasColumnType("integer");

                    b.Property<int>("DriveTrainID")
                        .HasColumnType("integer");

                    b.Property<int>("EngineSizeID")
                        .HasColumnType("integer");

                    b.Property<int>("FuelTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<bool>("IsInTransfer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmoking")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlateNumber")
                        .HasColumnType("text");

                    b.Property<int>("LocationID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MOTExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModelID")
                        .HasColumnType("integer");

                    b.Property<bool>("RepairHistory")
                        .HasColumnType("boolean");

                    b.Property<int>("TransmissionTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("VINNum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BodyTypeID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CarModelID");

                    b.HasIndex("ColorID");

                    b.HasIndex("DriveTrainID");

                    b.HasIndex("EngineSizeID");

                    b.HasIndex("FuelTypeID");

                    b.HasIndex("LocationID");

                    b.HasIndex("TransmissionTypeID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DealershipSystem.Models.CarExtra", b =>
                {
                    b.Property<int>("CarExtraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarExtraID"));

                    b.Property<int>("CarID")
                        .HasColumnType("integer");

                    b.Property<int>("ExtraID")
                        .HasColumnType("integer");

                    b.HasKey("CarExtraID");

                    b.HasIndex("CarID");

                    b.HasIndex("ExtraID");

                    b.ToTable("CarExtras");
                });

            modelBuilder.Entity("DealershipSystem.Models.CarMaker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("BrandEnglish")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrandJapanese")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CarMakers");
                });

            modelBuilder.Entity("DealershipSystem.Models.CarModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("MakerID")
                        .HasColumnType("integer");

                    b.Property<int>("ManufacturingEndYear")
                        .HasColumnType("integer");

                    b.Property<int>("ManufacturingStartYear")
                        .HasColumnType("integer");

                    b.Property<int>("Mass")
                        .HasColumnType("integer");

                    b.Property<string>("ModelCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelNameEnglish")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelNameJapanese")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("MakerID");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("DealershipSystem.Models.Color", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ColorNameEnglish")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorNameJapanese")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("DealershipSystem.Models.DrivetrainType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("DrivetrainTypes");
                });

            modelBuilder.Entity("DealershipSystem.Models.EngineSizeModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EngineSize")
                        .HasColumnType("integer");

                    b.Property<int>("ModelID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ModelID");

                    b.ToTable("EngineSizeModels");
                });

            modelBuilder.Entity("DealershipSystem.Models.FuelType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameJapanese")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("FuelTypes");
                });

            modelBuilder.Entity("DealershipSystem.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("CarID")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CarID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DealershipSystem.Models.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DealershipSystem.Models.Prefecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("NameJP")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameJP")
                        .IsUnique();

                    b.ToTable("Prefectures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hokkaido",
                            NameJP = "北海道"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aomori",
                            NameJP = "青森県"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Iwate",
                            NameJP = "岩手県"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Miyagi",
                            NameJP = "宮城県"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Akita",
                            NameJP = "秋田県"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Yamagata",
                            NameJP = "山形県"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Fukushima",
                            NameJP = "福島県"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ibaraki",
                            NameJP = "茨城県"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tochigi",
                            NameJP = "栃木県"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gunma",
                            NameJP = "群馬県"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Saitama",
                            NameJP = "埼玉県"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Chiba",
                            NameJP = "千葉県"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Tokyo",
                            NameJP = "東京都"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Kanagawa",
                            NameJP = "神奈川県"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Niigata",
                            NameJP = "新潟県"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Toyama",
                            NameJP = "富山県"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Ishikawa",
                            NameJP = "石川県"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Fukui",
                            NameJP = "福井県"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Yamanashi",
                            NameJP = "山梨県"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Nagano",
                            NameJP = "長野県"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Gifu",
                            NameJP = "岐阜県"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Shizuoka",
                            NameJP = "静岡県"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Aichi",
                            NameJP = "愛知県"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Mie",
                            NameJP = "三重県"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Shiga",
                            NameJP = "滋賀県"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Kyoto",
                            NameJP = "京都府"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Osaka",
                            NameJP = "大阪府"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Hyogo",
                            NameJP = "兵庫県"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Nara",
                            NameJP = "奈良県"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Wakayama",
                            NameJP = "和歌山県"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Tottori",
                            NameJP = "鳥取県"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Shimane",
                            NameJP = "島根県"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Okayama",
                            NameJP = "岡山県"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Hiroshima",
                            NameJP = "広島県"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Yamaguchi",
                            NameJP = "山口県"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Tokushima",
                            NameJP = "徳島県"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Kagawa",
                            NameJP = "香川県"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Ehime",
                            NameJP = "愛媛県"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Kochi",
                            NameJP = "高知県"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Fukuoka",
                            NameJP = "福岡県"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Saga",
                            NameJP = "佐賀県"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Nagasaki",
                            NameJP = "長崎県"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Kumamoto",
                            NameJP = "熊本県"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Oita",
                            NameJP = "大分県"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Miyazaki",
                            NameJP = "宮崎県"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Kagoshima",
                            NameJP = "鹿児島県"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Okinawa",
                            NameJP = "沖縄県"
                        });
                });

            modelBuilder.Entity("DealershipSystem.Models.TransmissionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TransmissionTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Type = "MT"
                        },
                        new
                        {
                            ID = 2,
                            Type = "AT"
                        },
                        new
                        {
                            ID = 3,
                            Type = "CVT"
                        },
                        new
                        {
                            ID = 4,
                            Type = "AMT"
                        },
                        new
                        {
                            ID = 5,
                            Type = "DCT"
                        });
                });

            modelBuilder.Entity("DealershipSystem.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("NameKanji")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("DealershipSystem.Models.Address", b =>
                {
                    b.HasOne("DealershipSystem.Models.Prefecture", "Prefecture")
                        .WithMany()
                        .HasForeignKey("PrefectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prefecture");
                });

            modelBuilder.Entity("DealershipSystem.Models.Car", b =>
                {
                    b.HasOne("DealershipSystem.Models.BodyType", "BodyType")
                        .WithMany()
                        .HasForeignKey("BodyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DealershipSystem.Models.CarMaker", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DealershipSystem.Models.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("CarModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DealershipSystem.Models.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DealershipSystem.Models.DrivetrainType", "DriveTrain")
                        .WithMany()
                        .HasForeignKey("DriveTrainID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DealershipSystem.Models.EngineSizeModel", "EngineSize")
                        .WithMany()
                        .HasForeignKey("EngineSizeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DealershipSystem.Models.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DealershipSystem.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DealershipSystem.Models.TransmissionType", "TransmissionType")
                        .WithMany()
                        .HasForeignKey("TransmissionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyType");

                    b.Navigation("Brand");

                    b.Navigation("CarModel");

                    b.Navigation("Color");

                    b.Navigation("DriveTrain");

                    b.Navigation("EngineSize");

                    b.Navigation("FuelType");

                    b.Navigation("Location");

                    b.Navigation("TransmissionType");
                });

            modelBuilder.Entity("DealershipSystem.Models.CarExtra", b =>
                {
                    b.HasOne("DealershipSystem.Models.Car", "Car")
                        .WithMany("CarExtras")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DealershipSystem.Models.Car", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Extra");
                });

            modelBuilder.Entity("DealershipSystem.Models.CarModel", b =>
                {
                    b.HasOne("DealershipSystem.Models.CarMaker", "Maker")
                        .WithMany()
                        .HasForeignKey("MakerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maker");
                });

            modelBuilder.Entity("DealershipSystem.Models.EngineSizeModel", b =>
                {
                    b.HasOne("DealershipSystem.Models.CarModel", "CarModel")
                        .WithMany("EngineSizes")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("DealershipSystem.Models.Image", b =>
                {
                    b.HasOne("DealershipSystem.Models.Car", "Car")
                        .WithMany("Images")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("DealershipSystem.Models.Location", b =>
                {
                    b.HasOne("DealershipSystem.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DealershipSystem.Models.Car", b =>
                {
                    b.Navigation("CarExtras");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("DealershipSystem.Models.CarModel", b =>
                {
                    b.Navigation("EngineSizes");
                });

            modelBuilder.Entity("DealershipSystem.Models.Color", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
